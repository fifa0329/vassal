<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Expressions</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
</head>
<body> 
	<table cellpadding="2" cellspacing="2" border="0" width="100%">
		<tbody>
			<tr align="center">
				<td valign="top">
					<h1>VASSAL Reference Manual</h1> <small><a href="index.htm">Home</a>
						&gt; <b>&nbsp;Expressions</b></small><br> <br>
				</td>
			</tr>
			<tr>
				<td valign="top">
					<hr width="100%" size="2">
					<h2>Expressions</h2>
					<img src="images/Expression.png" title="" alt=""><br>
					Any field within the Vassal Editor that is followed by a
					Calculator icon <img src="images/calculator.png"> allows the
					entry of an Expression. Expressions are essentially an in-line <a
					href="CalculatedProperty.htm">Calculated Property</a> that are 
					re-evaluated whenever its value is required.<br>
					<br>
					<a href="PropertyMatchExpression.htm">Property Match Expressions</a> are a special
					kind of expression that are used in Global Key Commands to select what counters to
					operate on, and in Trigger Action traits to check if the action is Triggered. These
					are described on a separate <a href="PropertyMatchExpression.htm">page</a>.<br> 
					<br>
					There are two varieties of Expressions. <a href="#beanshell">BeanShell Expressions</a>
					are identified by being surrounded by curly braces {}. They are very powerful and can
					be arbitrarily complex. <a href="#simple">Simple Expressions</a> are identified by not
					being surrounded by the curly braces {}. Simple Expressions are far less powerful than
					BeanShell expressions and are supported to provide compatibility with earlier versions 
					of Vassal.<br>
					<br>
					Expressions should not be confused with <a href="MessageFormat.htm">Message
					Formats</a> that are used by various traits and component to generate
					messages. Message Formats are far more limited than Expressions.
					They only allow the inclusion of Property values, they do not allow
					any sort of calculations. <br> 
				
				<a name="beanshell"></a><h3>BeanShell Expressions</h3>
					BeanShell Expressions (named after the software package
					the implements them in Vassal) allow you to use arbitrarily complex
					formulae to define the value returned. BeanShell Expressions are
					marked by being surrounded by braces {}.<br>
					<br>
					The BeanShell processor is an accurate implementation of the Java programming language
					and BeanShell Expressions are made up of Java language components. You can use any introductory
					Java tutorial to learn more about the syntax of BeanShell Expressions. The basic components are as follows:<br>
					<br>
					<table border="1" style="font-family:monospaced;">
						<tr>
							<th>Type</th>
							<th>Options</th>
							<th>Examples</th>
							<th>Notes</th>
						</tr>
						<tr>
							<td>Numbers</td>
							<td>&nbsp</td>							
							<td>{35}</td>
							<td>Vassal works with whole numbers. Decimal numbers are treated as Strings</td>
						</tr>
						<tr>
							<td>Strings</td>
							<td>&nbsp</td>
							<td>{"German"}</td>
							<td>A String must be enclosed in """ marks</td> 
						</tr>
						<tr>
							<td>Properties</td>
							<td>&nbsp</td>
							<td>{Nation}</td>
							<td>Any string not enclosed in "" is interpreted as a Property name</td>
						</tr>
						<tr>
							<td>Arithmetic</td>
							<td>
								+ Add<br>
								- Subtract<br>
								* Multiply<br>
								/ Divide<br>
								% Modulo
							</td>
							<td>
								{CurrentHP + 2 * Damage - Resistance}<br>
								{FirstName + "-" + Surname}<br>
								{Height * 10}<br>
								{width / 5}<br>
								{Level % 10}
							</td>
							<td>
								Using the + operator on two String will concatenate (join) them. If the values on either
								side of the + look like whole numbers, Vassal will attempt to add them.
							</td>
						</tr>		
						<tr>
							<td>Comparison</td>
							<td>
								>  Greater than<br>
								&lt;  Less than<br>
								>= Not less than<br>
								&lt;= Not greater than<br>
								== Equals<br>
								!= Not Equals<br>
								=~&nbsp;Match&nbsp;regular&nbsp;Expression
							</td>
							<td>
								{height&nbsp;>&nbsp;10&nbsp;&&&nbsp;width&nbsp;>=&nbsp;Level}<br>
								{length&nbsp;&lt;&nbsp;maxlength&nbsp;||&nbsp;breadth&nbsp;&lt;=&nbsp;maxbreadth}<br>
								{Nation=="Germany"}<br>
								{Army!="Allied"}<br>
								{Type="^A$"}
							</td>
							<td>
								Comparison operators are used primarily in <a href="PropertyMatchExpression.htm">Property Match Expressions</a> 
								and also in the If function.
							</td>
						</tr>			
						<tr>
							<td>Logical</td>
							<td>
								&& Logical AND<br>
								|| Logical OR<br>
								!  Logical NOT<br>
								() Grouping
							</td>
							<td>
								{Nation=="Germany" && Type="Unit"}<br>
								{Nation=="Germany" || Type="Unit"}<br>
								{Nation=="Germany" && Type="Unit"}<br>
								{! isInUse}<br>
								{A==B && (C==1 || D==2)}
							</td>
							<td>
								Comparison operators are used primarily in <a href="PropertyMatchExpression.htm">Property Match Expressions</a> 
								and also in the If function.
							</td>							
						</tr>	
							<tr>
							<td>Functions</td>
							<td>
								Alert(message)<br>
								If(comparison,value1,value2)<br>
								GetProperty(propertyName)<br>
								SumStack(propertyName)
							</td>
							<td>
								{Alert("Adding 1 to HP")}<br>
								{If(Nation=="Germany",1,3)}<br>
								{GetProperty("Nation"+myNation)<br>
								{SumStack("Attack")}
								
							</td>
							<td>
								<b>Alert</b> displays a message in a popup dialog box.<br>
								<b>If</b> returns value1 if the comparison is true, or value2 if it is not.<br>
								<b>GetProperty</b> returns the value of the Property, which may be an expression.<br>
								<b>SumStack</b> returns the total of the specified Property in all counters in the same stack as this one.<br>
							</td>
						</tr>
					</table>
	
				<a name="simple"></a><h3>Simple Expressions</h3>
					Simple expressions are not surrounded by braces and
					provide compatibility with earlier versions of Vassal that only
					implemented a much simpler version of Expressions. Simple
					Expressions are far more limited than BeanShell Expressions, only
					allowing the substitution of property values into a pre-determined
					string.<br>

					<table>
						<tr>
							<td width="20%">A Simple Integer Expression:</td>
							<td><img src="images/SimpleExpression1.png"></td>
							<td>A whole number. In general, Vassal does not support decimal numbers, except when stored and used as Strings.</td>
						</tr>
						<tr>
							<td>A basic Simple String Expression:</td>
							<td><img src="images/SimpleExpression2.png"></td>
							<td>A String in a Simple Expression is defined without quotation marks.</td>
						</tr>
						<tr>
							<td>A more complex example:</td>
							<td><img src="images/SimpleExpression3.png"></td>
							<td>The string $Nation$ will be replaced by the value of the Nation property.
							You can use multiple $...$ strings in an expression ($Nation$-$Division$),
							but can NOT nest them ($Nation$Count$$).</td>
						</tr>
					</table> 
					
					<br> 
					<b>SEE ALSO:</b>&nbsp;<a href="Properties.htm">Properties</a>
				</td>
			</tr>
			<tr>
			</tr>
		</tbody>
	</table>
	<br>
</body>
</html>
